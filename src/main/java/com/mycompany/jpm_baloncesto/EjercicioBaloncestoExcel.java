/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.jpm_baloncesto;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Component;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;

/**
 *
 * @author drank
 */
public class EjercicioBaloncestoExcel extends javax.swing.JFrame {
    private static Integer tirosDe2Realizados, tirosDe2Metidos, triplesRealizados, triplesMetidos, 
            tirosLibresMetidos, tirosLibresRealizados, rebotes, asistencias, taponesFavor, taponesContra,
            robos, perdidas;
    FrameCondiciones frameCondiciones = new FrameCondiciones();
    /**
     * Creates new form EjercicioBaloncestoExcel
     */
    public EjercicioBaloncestoExcel() {
        
        initComponents();
        setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("EstadÃ­sticas Baloncesto");
        selectorEquipos.setSelectedItem("LA Lakers");
        selectorPequenio.addActionListener(e -> tamanioElegido());
        selectorMediano.addActionListener(e -> tamanioElegido());
        selectorGrande.addActionListener(e -> tamanioElegido());
        buttonGroup1.clearSelection(); // Deseleccionar los radio button
        tamanioElegido();
        // minimumSize = this.getSize
        // setSize = el deseado
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel1 = new javax.swing.JPanel();
        paneles = new javax.swing.JTabbedPane();
        panelTiros = new javax.swing.JPanel();
        numTirosLibresMetidos = new javax.swing.JSpinner();
        numTirosLibresRealizados = new javax.swing.JSpinner();
        numTirosDe2Metidos = new javax.swing.JSpinner();
        numTirosDe2Realizados = new javax.swing.JSpinner();
        numTriplesMetidos = new javax.swing.JSpinner();
        numTriplesRealizados = new javax.swing.JSpinner();
        textoJLabelPersonalizado1 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado2 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado3 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado4 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado5 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado6 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        panelOtrosDatos = new javax.swing.JPanel();
        numRebotes = new javax.swing.JSpinner();
        numTaponesFavor = new javax.swing.JSpinner();
        numRobos = new javax.swing.JSpinner();
        numAsistencias = new javax.swing.JSpinner();
        numTaponesContra = new javax.swing.JSpinner();
        numPerdidas = new javax.swing.JSpinner();
        textoJLabelPersonalizado9 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado10 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado11 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado12 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado13 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado14 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        botonInsertar = new javax.swing.JButton();
        selectorEquipos = new javax.swing.JComboBox<>();
        selectorJugadores = new javax.swing.JComboBox<>();
        botonCrearGrafica = new javax.swing.JButton();
        botonCrearPDF = new javax.swing.JButton();
        textoJLabelPersonalizado7 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        textoJLabelPersonalizado8 = new com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuTamanio = new javax.swing.JMenu();
        selectorPequenio = new javax.swing.JRadioButtonMenuItem();
        selectorMediano = new javax.swing.JRadioButtonMenuItem();
        selectorGrande = new javax.swing.JRadioButtonMenuItem();
        menuCondiciones = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        numTirosLibresMetidos.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTirosLibresMetidos.setPreferredSize(new java.awt.Dimension(90, 25));

        numTirosLibresRealizados.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTirosLibresRealizados.setPreferredSize(new java.awt.Dimension(90, 25));

        numTirosDe2Metidos.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTirosDe2Metidos.setPreferredSize(new java.awt.Dimension(90, 25));

        numTirosDe2Realizados.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTirosDe2Realizados.setPreferredSize(new java.awt.Dimension(90, 25));

        numTriplesMetidos.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTriplesMetidos.setPreferredSize(new java.awt.Dimension(90, 25));

        numTriplesRealizados.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTriplesRealizados.setPreferredSize(new java.awt.Dimension(90, 25));

        textoJLabelPersonalizado1.setText("Tiros libres metidos:");

        textoJLabelPersonalizado2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado2.setText("Tiros de 2 metidos:");

        textoJLabelPersonalizado3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado3.setText("Triples metidos:");

        textoJLabelPersonalizado4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado4.setText("Tiros libres realizados:");

        textoJLabelPersonalizado5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado5.setText("Tiros de 2 realizados:");

        textoJLabelPersonalizado6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado6.setText("Triples realizados:");

        javax.swing.GroupLayout panelTirosLayout = new javax.swing.GroupLayout(panelTiros);
        panelTiros.setLayout(panelTirosLayout);
        panelTirosLayout.setHorizontalGroup(
            panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTirosLayout.createSequentialGroup()
                .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoJLabelPersonalizado1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(textoJLabelPersonalizado2, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                        .addComponent(textoJLabelPersonalizado3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(49, 49, 49)
                .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(numTirosDe2Metidos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(numTriplesMetidos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(numTirosLibresMetidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelTirosLayout.createSequentialGroup()
                        .addComponent(textoJLabelPersonalizado4, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numTirosLibresRealizados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTirosLayout.createSequentialGroup()
                        .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textoJLabelPersonalizado5, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(textoJLabelPersonalizado6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numTirosDe2Realizados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numTriplesRealizados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelTirosLayout.setVerticalGroup(
            panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTirosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTirosLayout.createSequentialGroup()
                        .addComponent(numTirosLibresMetidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numTirosDe2Metidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(numTriplesMetidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTirosLayout.createSequentialGroup()
                        .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numTirosLibresRealizados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numTirosDe2Realizados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numTriplesRealizados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelTirosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textoJLabelPersonalizado3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textoJLabelPersonalizado6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        paneles.addTab("Tiros", panelTiros);

        numRebotes.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numRebotes.setPreferredSize(new java.awt.Dimension(90, 25));

        numTaponesFavor.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTaponesFavor.setPreferredSize(new java.awt.Dimension(90, 25));

        numRobos.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numRobos.setPreferredSize(new java.awt.Dimension(90, 25));

        numAsistencias.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numAsistencias.setPreferredSize(new java.awt.Dimension(90, 25));

        numTaponesContra.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numTaponesContra.setPreferredSize(new java.awt.Dimension(90, 25));

        numPerdidas.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        numPerdidas.setPreferredSize(new java.awt.Dimension(90, 25));

        textoJLabelPersonalizado9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado9.setText("Rebotes:");

        textoJLabelPersonalizado10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado10.setText("Tapones a favor:");

        textoJLabelPersonalizado11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado11.setText("Robos:");

        textoJLabelPersonalizado12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado12.setText("Asistencias:");

        textoJLabelPersonalizado13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado13.setText("Tapones en contra:");

        textoJLabelPersonalizado14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        textoJLabelPersonalizado14.setText("Perdidas:");

        javax.swing.GroupLayout panelOtrosDatosLayout = new javax.swing.GroupLayout(panelOtrosDatos);
        panelOtrosDatos.setLayout(panelOtrosDatosLayout);
        panelOtrosDatosLayout.setHorizontalGroup(
            panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoJLabelPersonalizado11, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(textoJLabelPersonalizado10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textoJLabelPersonalizado9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numTaponesFavor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numRobos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numRebotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                        .addComponent(textoJLabelPersonalizado14, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numPerdidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                        .addComponent(textoJLabelPersonalizado12, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numAsistencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                        .addComponent(textoJLabelPersonalizado13, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numTaponesContra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelOtrosDatosLayout.setVerticalGroup(
            panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numAsistencias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numTaponesContra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numPerdidas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelOtrosDatosLayout.createSequentialGroup()
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numRebotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numTaponesFavor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numRobos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoJLabelPersonalizado11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(67, Short.MAX_VALUE))
        );

        paneles.addTab("Otros Datos", panelOtrosDatos);

        botonInsertar.setText("Insertar Datos");
        botonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertarActionPerformed(evt);
            }
        });

        selectorEquipos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LA Lakers", "GS Warriors" }));
        selectorEquipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorEquiposActionPerformed(evt);
            }
        });

        selectorJugadores.setToolTipText("");
        selectorJugadores.setName(""); // NOI18N

        botonCrearGrafica.setText("Crear GrÃ¡fica");
        botonCrearGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearGraficaActionPerformed(evt);
            }
        });

        botonCrearPDF.setText("Crear PDF");
        botonCrearPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearPDFActionPerformed(evt);
            }
        });

        textoJLabelPersonalizado7.setText("Jugador:");

        textoJLabelPersonalizado8.setText("Equipo:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(paneles)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(botonInsertar)
                        .addGap(195, 195, 195)
                        .addComponent(botonCrearPDF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCrearGrafica)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(textoJLabelPersonalizado7, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectorJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textoJLabelPersonalizado8, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectorEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorEquipos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectorJugadores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoJLabelPersonalizado7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoJLabelPersonalizado8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneles, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonInsertar)
                    .addComponent(botonCrearGrafica)
                    .addComponent(botonCrearPDF))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 390));

        menuTamanio.setText("TamaÃ±o");

        buttonGroup1.add(selectorPequenio);
        selectorPequenio.setSelected(true);
        selectorPequenio.setText("PequeÃ±o");
        selectorPequenio.setBorderPainted(false);
        menuTamanio.add(selectorPequenio);

        buttonGroup1.add(selectorMediano);
        selectorMediano.setText("Mediano");
        menuTamanio.add(selectorMediano);

        buttonGroup1.add(selectorGrande);
        selectorGrande.setText("Grande");
        menuTamanio.add(selectorGrande);

        jMenuBar1.add(menuTamanio);

        menuCondiciones.setText("Condiciones de servicio");
        menuCondiciones.setComponentPopupMenu(jPopupMenu1);
        menuCondiciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCondicionesMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuCondiciones);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertarActionPerformed
        tirosLibresMetidos = (Integer) numTirosLibresMetidos.getValue();
        tirosLibresRealizados = (Integer) numTirosLibresRealizados.getValue();
        tirosDe2Metidos = (Integer) numTirosDe2Metidos.getValue();
        tirosDe2Realizados = (Integer) numTirosDe2Realizados.getValue();
        triplesMetidos = (Integer) numTriplesMetidos.getValue();
        triplesRealizados = (Integer) numTriplesRealizados.getValue();
        rebotes = (Integer) numRebotes.getValue();
        asistencias = (Integer) numAsistencias.getValue();
        taponesFavor = (Integer) numTaponesFavor.getValue();
        taponesContra = (Integer) numTaponesContra.getValue();
        robos = (Integer) numRobos.getValue();
        perdidas = (Integer) numPerdidas.getValue();
        String nombreJugador = (String) selectorJugadores.getSelectedItem();
        
        String nombreEquipo = (String) selectorEquipos.getSelectedItem();
        String nombreArchivo = "LA_Lakers.xlsx";
        if (!nombreEquipo.equals("LA Lakers")) {
            nombreArchivo = "GS_Warriors.xlsx";
        }
        
        
        if ((tirosDe2Metidos + triplesMetidos + tirosLibresMetidos) > (triplesRealizados + tirosDe2Realizados + tirosLibresRealizados)) {
            JOptionPane.showMessageDialog(this, "La suma de los tiros metidos no puede ser mayor a los tiros realizados.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (archivoEstaAbierto(nombreArchivo)) {
            JOptionPane.showMessageDialog(this, "El archivo Excel se encuentra abierto o bloqueado por otro programa. CiÃ©rrelo para escribir datos en Ã©l.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        crearInforme(nombreArchivo, nombreJugador, tirosLibresMetidos, tirosLibresRealizados, tirosDe2Metidos, tirosDe2Realizados, 
                triplesMetidos, triplesRealizados, rebotes, asistencias, taponesFavor, taponesContra, robos, perdidas);
        JOptionPane.showMessageDialog(this, "Datos insertados.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonInsertarActionPerformed

    private void selectorEquiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorEquiposActionPerformed
        equipoElegido();
    }//GEN-LAST:event_selectorEquiposActionPerformed

    private void botonCrearGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearGraficaActionPerformed
        String nombreJugador = (String) selectorJugadores.getSelectedItem();
        
        String nombreEquipo = (String) selectorEquipos.getSelectedItem();
        String nombreArchivo = "LA_Lakers.xlsx";
        if (!nombreEquipo.equals("LA Lakers")) {
            nombreArchivo = "GS_Warriors.xlsx";
        }
        
        if (archivoEstaAbierto(nombreArchivo)) {
            JOptionPane.showMessageDialog(this, "El archivo Excel se encuentra abierto o bloqueado por otro programa. CiÃ©rrelo para escribir datos en Ã©l.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        crearGrafica(nombreJugador, nombreArchivo);
        JOptionPane.showMessageDialog(this, "GrÃ¡ficas creadas para el jugador " + nombreJugador + ".", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonCrearGraficaActionPerformed

    private void botonCrearPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearPDFActionPerformed
        String nombreJugador = (String) selectorJugadores.getSelectedItem();
        
        String nombreEquipo = (String) selectorEquipos.getSelectedItem();
        String nombreArchivo = "LA_Lakers.xlsx";
        if (!nombreEquipo.equals("LA Lakers")) {
            nombreArchivo = "GS_Warriors.xlsx";
        }
        
        if (archivoEstaAbierto(nombreArchivo)) {
            JOptionPane.showMessageDialog(this, "El archivo Excel se encuentra abierto o bloqueado por otro programa. CiÃ©rrelo para escribir datos en Ã©l.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        crearPDF(nombreJugador, nombreArchivo, nombreEquipo);
        JOptionPane.showMessageDialog(this, "PDF creado para el jugador " + nombreJugador + ".", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_botonCrearPDFActionPerformed

    private void menuCondicionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCondicionesMouseClicked
        frameCondiciones.setVisible(true);
    }//GEN-LAST:event_menuCondicionesMouseClicked

    private void tamanioElegido() {
        int tamanioSeleccionado = 0;
        
        if (selectorPequenio.isSelected()) {
            tamanioSeleccionado = 1;
        } else if (selectorMediano.isSelected()) {
            tamanioSeleccionado = 2;
        } else if (selectorGrande.isSelected()) {
            tamanioSeleccionado = 3;
        }
       
        
        for (Component comp : jPanel1.getComponents()) {
            if (comp instanceof TextoJLabelPersonalizado) {
                TextoJLabelPersonalizado lbl = (TextoJLabelPersonalizado) comp;
                lbl.cambiarTamanio(tamanioSeleccionado);
            }
        }
        
        for (Component comp : panelTiros.getComponents()) {
            if (comp instanceof TextoJLabelPersonalizado) {
                TextoJLabelPersonalizado lbl = (TextoJLabelPersonalizado) comp;
                lbl.cambiarTamanio(tamanioSeleccionado);
            }
        }
        
        for (Component comp : panelOtrosDatos.getComponents()) {
            if (comp instanceof TextoJLabelPersonalizado) {
                TextoJLabelPersonalizado lbl = (TextoJLabelPersonalizado) comp;
                lbl.cambiarTamanio(tamanioSeleccionado);
            }
        }
    }
    
    private void equipoElegido() {
        selectorJugadores.removeAllItems();
        if ((String) selectorEquipos.getSelectedItem() == "LA Lakers") {
            selectorJugadores.addItem("Lebron");
            selectorJugadores.addItem("Dalton");
            selectorJugadores.addItem("Bronny");
            selectorJugadores.addItem("Anthony");
            selectorJugadores.addItem("Jarred");
        } else if ((String) selectorEquipos.getSelectedItem() == "GS Warriors") {
            selectorJugadores.addItem("Stephen");
            selectorJugadores.addItem("Buddy");
            selectorJugadores.addItem("Draymond");
            selectorJugadores.addItem("Brandin");
            selectorJugadores.addItem("Quinten");
        }
    }
    
    public boolean archivoEstaAbierto(String nombreArchivo) {
        File archivo = new File(nombreArchivo);
        if (!archivo.exists()) {
            return false;
        }

        try (RandomAccessFile raf = new RandomAccessFile(archivo, "rw")) {
            return false;
        } catch (IOException e) {
            return true;
        }
    }
    
    private void crearPDF(String nombreJugador, String nombreArchivo, String nombreEquipo) {
    Document document = new Document();
    Double mediaTriples = 0.0;
    Double FG = 0.0;
    Double eFG = 0.0;
    Double TS = 0.0;
    try {
        PdfWriter.getInstance(document, new FileOutputStream(nombreJugador + "_informe.pdf"));
        document.open();

        // Encabezado
        Font headerFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
        Paragraph header = new Paragraph(nombreJugador + " - " + nombreEquipo, headerFont);
        header.setAlignment(Element.ALIGN_CENTER);
        document.add(header);

        // Espaciado
        document.add(new Paragraph("\n"));

        // GrÃ¡ficos
        agregarImagenAlPDF(document, "graficas/" + nombreJugador + "/Puntos.jpg", "Puntos por Partido");
        agregarImagenAlPDF(document, "graficas/" + nombreJugador + "/Rebotes.jpg", "Rebotes por Partido");
        agregarImagenAlPDF(document, "graficas/" + nombreJugador + "/Asistencias.jpg", "Asistencias por Partido");


        // Otras estadÃ­sticas
        Font statsFont = new Font(Font.FontFamily.HELVETICA, 12);
        Paragraph statsTitle = new Paragraph("Otras estadÃ­sticas", new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD));
        statsTitle.setAlignment(Element.ALIGN_CENTER);
        document.add(statsTitle);

        try (FileInputStream fis = new FileInputStream(new File(nombreArchivo));
            Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet hoja = workbook.getSheet(nombreJugador);
            if (hoja == null) {
                JOptionPane.showMessageDialog(this, "La hoja del jugador " + nombreJugador + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int ultimaFila = hoja.getLastRowNum();
            Row ultimaFilaObjeto = hoja.getRow(ultimaFila);
                
            mediaTriples = ultimaFilaObjeto.getCell(4).getNumericCellValue();
            FG = ultimaFilaObjeto.getCell(13).getNumericCellValue();
            eFG = ultimaFilaObjeto.getCell(14).getNumericCellValue();
            TS = ultimaFilaObjeto.getCell(15).getNumericCellValue();

        } catch (IOException e) {
            e.printStackTrace();
        }
        
        String stats1 = "Triples por Partido: " + mediaTriples + "   FG%: " + FG;
        String stats2 = "eFG%: " + eFG + "         TS%: " + TS;

        Paragraph statsParagraph = new Paragraph(stats1 + "\n" + stats2, statsFont);
        statsParagraph.setAlignment(Element.ALIGN_CENTER);
        document.add(statsParagraph);
        } catch (BadElementException ex) {
            System.err.println("Error al procesar un elemento del documento: " + ex.getMessage());
        } catch (IOException ex) {
            System.err.println("Error de entrada/salida: " + ex.getMessage());
        } catch (DocumentException ex) {
            System.err.println("Error al manejar el documento PDF: " + ex.getMessage());
        }
        document.close();
        System.out.println("PDF creado para " + nombreJugador);
    }
    
    private void agregarImagenAlPDF(Document document, String rutaImagen, String titulo) throws DocumentException, IOException {
    File imagen = new File(rutaImagen);
    if (imagen.exists()) {
        Image img = Image.getInstance(rutaImagen);
        img.scaleToFit(350, 175); // TamaÃ±o
        img.setAlignment(Element.ALIGN_CENTER);
        document.add(img);

        Paragraph imageTitle = new Paragraph(titulo, new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD));
        imageTitle.setAlignment(Element.ALIGN_CENTER);
        document.add(imageTitle);

        // Espaciado
        document.add(new Paragraph("\n"));
    }
}
    
    private void crearGrafica(String nombreJugador, String nombreArchivo) {
        double puntos = 0; // Primer dato
        int numeroPartido = 1;
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        DefaultCategoryDataset datasetMedia = new DefaultCategoryDataset();
        
        JFreeChart graficaPuntos = ChartFactory.createBarChart(
                    "Puntos por Partido de " + nombreJugador, // TÃ­tulo
                    "Partidos",           // Etiqueta del eje X
                    "Puntos",              // Etiqueta del eje Y
                    dataset,                 // Conjunto de datos
                    org.jfree.chart.plot.PlotOrientation.VERTICAL,
                    true,
                    true,
                    false
                );
        
        // Linea media
        CategoryPlot plot = graficaPuntos.getCategoryPlot();
        LineAndShapeRenderer renderer = new LineAndShapeRenderer();
        plot.setDataset(1, datasetMedia);
        plot.mapDatasetToRangeAxis(1, 0);
        plot.setRenderer(1, renderer);

        // GrÃ¡fica rebotes
        DefaultCategoryDataset datasetRebotes = new DefaultCategoryDataset();
        JFreeChart graficaRebotes = ChartFactory.createLineChart(
                    "Rebotes por Partido de " + nombreJugador, // TÃ­tulo
                    "Partidos",           // Etiqueta del eje X
                    "Rebotes",              // Etiqueta del eje Y
                    datasetRebotes,                 // Conjunto de datos
                    org.jfree.chart.plot.PlotOrientation.VERTICAL,
                    true,
                    true,
                    false
                );
        
        // GrÃ¡fica asistencias
        DefaultCategoryDataset datasetAsistencias = new DefaultCategoryDataset();
        JFreeChart graficaAsistencias = ChartFactory.createBarChart(
                    "Asistencias por Partido de " + nombreJugador, // TÃ­tulo
                    "Partidos",           // Etiqueta del eje X
                    "Asistencias",              // Etiqueta del eje Y
                    datasetAsistencias,                 // Conjunto de datos
                    org.jfree.chart.plot.PlotOrientation.VERTICAL,
                    true,
                    true,
                    false
                );
        // Lectura Excel
        try (FileInputStream fis = new FileInputStream(new File(nombreArchivo));
            Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet hoja = workbook.getSheet(nombreJugador);
            if (hoja == null) {
                JOptionPane.showMessageDialog(this, "La hoja del jugador " + nombreJugador + " no existe.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int ultimaFila = hoja.getLastRowNum();
            
            for (int i = 1; i <= ultimaFila - 2; i++) {
                Row fila = hoja.getRow(i);
                if (fila == null) continue; // Por si estuviera vacia
                
                Cell tirosLibres = fila.getCell(0);
                Cell tirosDe2 = fila.getCell(2);
                Cell triples = fila.getCell(4);
                Cell rebotes = fila.getCell(6);
                Cell asistencias = fila.getCell(7);
                if (tirosLibres.getCellType() == CellType.NUMERIC && tirosDe2.getCellType() == CellType.NUMERIC
                        && triples.getCellType() == CellType.NUMERIC && rebotes.getCellType() == CellType.NUMERIC) {
                    puntos += tirosLibres.getNumericCellValue();
                    puntos += (tirosDe2.getNumericCellValue() * 2);
                    puntos += (triples.getNumericCellValue() * 3);
                    
                    double puntosMedia = puntos / 3;
                    
                    String categoria = "Partido " + numeroPartido;
                    dataset.addValue(puntos, "Puntos", categoria);
                    datasetMedia.addValue(puntos, "Media", categoria);
                    datasetRebotes.addValue(rebotes.getNumericCellValue(), "Rebotes", categoria);
                    datasetAsistencias.addValue(asistencias.getNumericCellValue(), "Asistencias", categoria);
                    numeroPartido++;
                }
                puntos = 0;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Guardar el grÃ¡fico como archivo JPG
        try {
            String nombreGraficaMedia = "Puntos.jpg";
            String nombreGraficaRebotes = "Rebotes.jpg";
            String nombreGraficaAsistencias = "Asistencias.jpg";
            File carpetaGraficas = new File("graficas");
            File carpetaJugador = new File(carpetaGraficas.getPath() + File.separator + nombreJugador);
            String rutaCarpetaJugador = carpetaJugador.getPath() + File.separator;
            new File(rutaCarpetaJugador).mkdirs();
            ChartUtils.saveChartAsJPEG(new File(rutaCarpetaJugador + nombreGraficaMedia), graficaPuntos, 800, 600);
            ChartUtils.saveChartAsJPEG(new File(rutaCarpetaJugador + nombreGraficaRebotes), graficaRebotes, 800, 600);
            ChartUtils.saveChartAsJPEG(new File(rutaCarpetaJugador + nombreGraficaAsistencias), graficaAsistencias, 800, 600);
            System.out.println("GrÃ¡ficas guardadas en: " + carpetaJugador.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("Error al guardar el grÃ¡fico: " + e.getMessage());
        }
    }
    
    private void crearInforme(String nombreArchivoIn, String nombreJugador, Integer tirosLibresMetidos, Integer tirosLibresRealizados, 
            Integer tirosDe2Metidos, Integer tirosDe2Realizados, 
            Integer triplesMetidos, Integer triplesRealizados, Integer rebotes, Integer asistencias, 
            Integer taponesFavor, Integer taponesContra, Integer robos, Integer perdidas) {
        String nombreArchivo = nombreArchivoIn;
        String nombreHoja = nombreJugador;
         
        
        File archivo = new File(nombreArchivo);
        Workbook libroTrabajo;
        
        try {
            if (archivo.exists() && archivo.isFile()) {
                libroTrabajo = WorkbookFactory.create(new FileInputStream(archivo)); // Lee el archivo y crea la factory
            } else {
                libroTrabajo = new XSSFWorkbook();
            }
            Sheet hoja = libroTrabajo.getSheet(nombreHoja);
            
            CellStyle estiloMain = libroTrabajo.createCellStyle();
            org.apache.poi.ss.usermodel.Font fuenteMain = libroTrabajo.createFont();
            fuenteMain.setBold(true);
            fuenteMain.setColor(IndexedColors.DARK_GREEN.getIndex());
            fuenteMain.setFontName("Calibri");
            estiloMain.setFont(fuenteMain);
            
            
            if (hoja == null) {
                hoja = libroTrabajo.createSheet(nombreHoja);
                Row fila = hoja.createRow(0);
                System.out.println("Hoja creada correctamente para: " + nombreHoja);

                String[] encabezados = {
                    "Tiros libres metidos", "Tiros libres realizados",
                    "Tiros de 2 metidos", "Tiros de 2 realizados", "Triples metidos",
                    "Triples realizados", "Rebotes", "Asistencias", "Tapones a favor", 
                    "Tapones en contra", "Robos", "Perdidas", "Valoracion", "FG%", "eFG%", "TS%"
                };

                for (int i = 0; i < encabezados.length; i++) {
                    Cell celda = fila.createCell(i);
                    celda.setCellValue(encabezados[i]);
                    celda.setCellStyle(estiloMain);
                }
            }
            
           
            int numeroFilas = hoja.getPhysicalNumberOfRows();

            // Verificar si la penÃºltima fila es "Media"
            Row ultimaFila = hoja.getRow(numeroFilas - 2);
            if (ultimaFila != null && ultimaFila.getCell(0) != null) {
                Cell cell = ultimaFila.getCell(0);
                if (cell.getCellType() == CellType.STRING && cell.getStringCellValue().equals("Media")) {
                    // Eliminar las dos Ãºltimas filas que contienen "Media" y los valores
                    for (int i = 0; i < 2; i++) {
                        int filaIndice = numeroFilas - 1 - i;  // Obtener la fila a eliminar
                        Row fila = hoja.getRow(filaIndice);
                        if (fila != null) {
                            hoja.removeRow(fila);  // Eliminar la fila
                        }
                    }
                }
            }
            
            CellStyle estilo = libroTrabajo.createCellStyle();
            org.apache.poi.ss.usermodel.Font fuente = libroTrabajo.createFont();
            fuente.setBold(true);
            fuente.setColor(IndexedColors.BLUE.getIndex());
            fuente.setFontName("Arial");
            estilo.setFont(fuente);
            estilo.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
            estilo.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            estilo.setAlignment(HorizontalAlignment.CENTER);
            estilo.setVerticalAlignment(VerticalAlignment.TOP);
            
            Double FG = ((double) (tirosDe2Metidos + triplesMetidos + tirosLibresMetidos) / (tirosDe2Realizados + triplesRealizados + tirosLibresRealizados)) * 100;
            Double eFG = (((tirosDe2Metidos + triplesMetidos + tirosLibresMetidos) + (0.5 * triplesMetidos)) / (tirosDe2Realizados + triplesRealizados + tirosLibresRealizados)) * 100;
            int puntosTotales = (2 * tirosDe2Metidos) + (3 * triplesMetidos) + tirosLibresMetidos;
            Double TS = (double) (puntosTotales / (2 * (tirosDe2Realizados + triplesRealizados + (0.44 * tirosLibresRealizados)))) * 100;
            
            Double tirosFallados = (double) (tirosDe2Realizados + triplesRealizados) - (tirosDe2Metidos + triplesMetidos);
            Double tirosLibresFallados = (double) (tirosLibresRealizados - tirosLibresMetidos);
            
            Double valoracion = (double) (puntosTotales + rebotes + asistencias + robos + taponesFavor) - (tirosFallados + tirosLibresFallados + perdidas + taponesContra);
            
            int filaNumero = hoja.getPhysicalNumberOfRows();
            Row fila = hoja.createRow(filaNumero);
            Cell celda = fila.createCell(0, CellType.STRING);
            celda.setCellValue(tirosLibresMetidos);
            celda = fila.createCell(1, CellType.NUMERIC);
            celda.setCellValue(tirosLibresRealizados);
            celda = fila.createCell(2, CellType.NUMERIC);
            celda.setCellValue(tirosDe2Metidos);
            celda = fila.createCell(3, CellType.NUMERIC);
            celda.setCellValue(tirosDe2Realizados);
            celda = fila.createCell(4, CellType.NUMERIC);
            celda.setCellValue(triplesMetidos);
            celda = fila.createCell(5, CellType.NUMERIC);
            celda.setCellValue(triplesRealizados);
            celda = fila.createCell(6, CellType.NUMERIC);
            celda.setCellValue(rebotes);
            celda = fila.createCell(7, CellType.NUMERIC);
            celda.setCellValue(asistencias);
            celda = fila.createCell(8, CellType.NUMERIC);
            celda.setCellValue(taponesFavor);
            celda = fila.createCell(9, CellType.NUMERIC);
            celda.setCellValue(taponesContra);
            celda = fila.createCell(10, CellType.NUMERIC);
            celda.setCellValue(robos);
            celda = fila.createCell(11, CellType.NUMERIC);
            celda.setCellValue(perdidas);
            celda = fila.createCell(12, CellType.NUMERIC);
            celda.setCellValue(valoracion);
            celda = fila.createCell(13, CellType.NUMERIC);
            celda.setCellValue(FG);
            celda = fila.createCell(14, CellType.NUMERIC);
            celda.setCellValue(eFG);
            celda = fila.createCell(15, CellType.NUMERIC);
            celda.setCellValue(TS);
            
            

            // Obtener el nÃºmero de filas ya existentes
            numeroFilas = hoja.getPhysicalNumberOfRows();


            // Insertamos una nueva fila para el texto "Media"
            Row filaMediaTexto = hoja.createRow(numeroFilas);  // Fila para el texto "Media"
            Cell celdaMediaTexto = filaMediaTexto.createCell(0);
            celdaMediaTexto.setCellValue("Media");
            celdaMediaTexto.setCellStyle(estilo); 

            // Crear una fila adicional para los valores de medias
            Row filaMediaValores = hoja.createRow(numeroFilas + 1);  // Fila para los valores

            // CÃ¡lculo de medias para cada columna
            for (int col = 0; col < 16; col++) {
                double suma = 0;
                int filasDatos = numeroFilas; 
                int conteoDatos = 0; 

                // Recorrer las filas y sumar los valores de cada celda
                for (int i = 1; i <= filasDatos; i++) {
                    Row filaActual = hoja.getRow(i);
                    if (filaActual != null && filaActual.getCell(col) != null) {
                        // Verificamos si la celda tiene un valor numÃ©rico
                        if (filaActual.getCell(col).getCellType() == CellType.NUMERIC) {
                            suma += filaActual.getCell(col).getNumericCellValue();
                            conteoDatos++;  // Incrementamos el contador si hay un dato
                        }
                    }
                }

                // Calcular la media solo si hay datos vÃ¡lidos
                double media = conteoDatos > 0 ? suma / conteoDatos : 0;  // Evitar divisiÃ³n por 0 si no hay datos
                Cell celdaMediaValores = filaMediaValores.createCell(col, CellType.NUMERIC);
                celdaMediaValores.setCellValue(media);
                celdaMediaValores.setCellStyle(estilo);
            }

                try (FileOutputStream archivoSalida = new FileOutputStream(nombreArchivo)) {
                    libroTrabajo.write(archivoSalida);
                    System.out.println("Datos agregados al archivo Excel correctamente.");
                } catch (IOException e) {
                    System.out.println("Error al escribir el archivo: " + e.getMessage());
                    e.printStackTrace();
                }
                libroTrabajo.close();
            
        } catch (IOException e) {
                e.printStackTrace();
            }
  
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EjercicioBaloncestoExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EjercicioBaloncestoExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EjercicioBaloncestoExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EjercicioBaloncestoExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EjercicioBaloncestoExcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCrearGrafica;
    private javax.swing.JButton botonCrearPDF;
    private javax.swing.JButton botonInsertar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenu menuCondiciones;
    private javax.swing.JMenu menuTamanio;
    private javax.swing.JSpinner numAsistencias;
    private javax.swing.JSpinner numPerdidas;
    private javax.swing.JSpinner numRebotes;
    private javax.swing.JSpinner numRobos;
    private javax.swing.JSpinner numTaponesContra;
    private javax.swing.JSpinner numTaponesFavor;
    private javax.swing.JSpinner numTirosDe2Metidos;
    private javax.swing.JSpinner numTirosDe2Realizados;
    private javax.swing.JSpinner numTirosLibresMetidos;
    private javax.swing.JSpinner numTirosLibresRealizados;
    private javax.swing.JSpinner numTriplesMetidos;
    private javax.swing.JSpinner numTriplesRealizados;
    private javax.swing.JPanel panelOtrosDatos;
    private javax.swing.JPanel panelTiros;
    private javax.swing.JTabbedPane paneles;
    private javax.swing.JComboBox<String> selectorEquipos;
    private javax.swing.JRadioButtonMenuItem selectorGrande;
    private javax.swing.JComboBox<String> selectorJugadores;
    private javax.swing.JRadioButtonMenuItem selectorMediano;
    private javax.swing.JRadioButtonMenuItem selectorPequenio;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado1;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado10;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado11;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado12;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado13;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado14;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado2;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado3;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado4;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado5;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado6;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado7;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado8;
    private com.mycompany.jpm_baloncesto.TextoJLabelPersonalizado textoJLabelPersonalizado9;
    // End of variables declaration//GEN-END:variables
}
