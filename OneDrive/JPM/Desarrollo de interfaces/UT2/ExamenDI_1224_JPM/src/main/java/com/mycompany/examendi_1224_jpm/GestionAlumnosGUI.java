/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.examendi_1224_jpm;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartUtils;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.layout.element.Image;
import java.awt.Component;
import java.awt.Dimension;
import javax.swing.*;
import java.io.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
/**
 *
 * @author drank
 */
public class GestionAlumnosGUI extends javax.swing.JFrame {
    private static final String rutaExcel = "notas_alumnos.xlsx";
    MenuElegido menuElegido = new MenuElegido();
    /**
     * Creates new form GestionAlumnosGUI
     */
    public GestionAlumnosGUI() {
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("Gestor Alumnos");
        jComboBoxClase.setSelectedItem("Clase A");
        jCheckBoxMenuItemVentana.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jComboBoxClase = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonAñadirNotas = new javax.swing.JButton();
        jButtonGenerarPDF = new javax.swing.JButton();
        jSpinnerMatematicas = new javax.swing.JSpinner();
        jSpinnerFisica = new javax.swing.JSpinner();
        jSpinnerQuimica = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxAlumno = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jSpinnerMusica = new javax.swing.JSpinner();
        textoAprobado_Suspenso1 = new com.mycompany.examendi_1224_jpm.TextoAprobado_Suspenso();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemNotas = new javax.swing.JMenuItem();
        jCheckBoxMenuItemVentana = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBoxClase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clase A", "Clase B" }));
        jComboBoxClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxClaseActionPerformed(evt);
            }
        });

        jLabel1.setText("Alumno:");

        jButtonAñadirNotas.setText("Añadir");
        jButtonAñadirNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAñadirNotasActionPerformed(evt);
            }
        });

        jButtonGenerarPDF.setText("Crear PDF");
        jButtonGenerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarPDFActionPerformed(evt);
            }
        });

        jSpinnerMatematicas.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        jSpinnerFisica.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        jSpinnerQuimica.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Matemáticas:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Notas");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Fisica:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Quimica:");

        jLabel7.setText("Clase:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Música:");

        jSpinnerMusica.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        jSpinnerMusica.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerMusicaStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonAñadirNotas)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxClase, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textoAprobado_Suspenso1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerQuimica, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jSpinnerFisica, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                        .addComponent(jSpinnerMatematicas))
                                    .addComponent(jSpinnerMusica, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonGenerarPDF)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jComboBoxClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerMatematicas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerFisica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBoxAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSpinnerQuimica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jSpinnerMusica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoAprobado_Suspenso1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAñadirNotas)
                    .addComponent(jButtonGenerarPDF))
                .addGap(14, 14, 14))
        );

        jTabbedPane1.addTab("Añadir Notas Alumno", jPanel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("Menú");

        jMenuItemNotas.setText("Resetear notas");
        jMenuItemNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNotasActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemNotas);

        jCheckBoxMenuItemVentana.setSelected(true);
        jCheckBoxMenuItemVentana.setText("Cambiar tamaño mínimo ventana");
        jCheckBoxMenuItemVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemVentanaActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItemVentana);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jMenuItemNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNotasActionPerformed
        jSpinnerMatematicas.setValue(1);
        jSpinnerFisica.setValue(1);
        jSpinnerQuimica.setValue(1);
        jSpinnerMusica.setValue(1);
        menuElegido.setVisible(true);
    }//GEN-LAST:event_jMenuItemNotasActionPerformed

    private void jCheckBoxMenuItemVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemVentanaActionPerformed
        if (jCheckBoxMenuItemVentana.isSelected()) {
            setMinimumSize(new Dimension(675, 600));
            setSize(675, 600);
            menuElegido.setVisible(true);
        } else {
            setMinimumSize(new Dimension(0, 0));
            menuElegido.setVisible(true);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemVentanaActionPerformed

    private void jSpinnerMusicaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerMusicaStateChanged
        Integer notaActual = (Integer) jSpinnerMusica.getValue();
        Integer parametro = 0;
        if (notaActual < 5) {
            parametro = 1;
        } else {
            parametro = 2;
        }

        for (Component comp : jPanel1.getComponents()) {
            if (comp instanceof TextoAprobado_Suspenso) {
                TextoAprobado_Suspenso lbl = (TextoAprobado_Suspenso) comp;
                lbl.detectarNota(parametro);
            }
        }
    }//GEN-LAST:event_jSpinnerMusicaStateChanged

    // Evento para generar el PDF con gráficos
    private void jButtonGenerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarPDFActionPerformed
        String alumno = jComboBoxAlumno.getSelectedItem().toString();
        double[] notas = leerNotasDesdeExcel(alumno);

        if (notas.length > 0) {
            double media = leerMediaExcel(alumno);
            String[] asignaturas = {"Matemáticas", "Física", "Química", "Música"};
            String rutaGrafico = "grafico_" + alumno + ".jpg";
            String rutaPDF = "reporte_" + alumno + ".pdf";

            crearGraficoNotas("Notas de " + alumno, asignaturas, notas, media, rutaGrafico);
            generarPDFAlumno(rutaPDF, alumno, media, rutaGrafico);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontraron notas para el alumno seleccionado.");
        }
    }//GEN-LAST:event_jButtonGenerarPDFActionPerformed

    // Evento para añadir notas de un alumno
    private void jButtonAñadirNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAñadirNotasActionPerformed
        if (jComboBoxAlumno.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, "Se debe elegir un alumno para insertar las notas.");
            return;
        }
        String alumno = jComboBoxAlumno.getSelectedItem().toString();
        Integer[] notas = new Integer[]{
            (Integer) jSpinnerMatematicas.getValue(),
            (Integer) jSpinnerFisica.getValue(),
            (Integer) jSpinnerQuimica.getValue(),
            (Integer) jSpinnerMusica.getValue()
        };

        añadirNotasAExcel(alumno, notas);
    }//GEN-LAST:event_jButtonAñadirNotasActionPerformed

    private void jComboBoxClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxClaseActionPerformed
        cargarAlumnos();
    }//GEN-LAST:event_jComboBoxClaseActionPerformed

    
    // Cargar alumnos en JComboBox desde Excel
    private void cargarAlumnos() {
        jComboBoxAlumno.removeAllItems();
        if ((String) jComboBoxClase.getSelectedItem() == "Clase A") {
            jComboBoxAlumno.addItem("Alumno 1");
            jComboBoxAlumno.addItem("Alumno 2");
            jComboBoxAlumno.addItem("Alumno 3");
            jComboBoxAlumno.addItem("Alumno 4");
            jComboBoxAlumno.addItem("Alumno 5");
            jComboBoxAlumno.addItem("Alumno 6");
            jComboBoxAlumno.addItem("Alumno 7");
            jComboBoxAlumno.addItem("Alumno 8");
        } else if ((String) jComboBoxClase.getSelectedItem() == "Clase B") {
            jComboBoxAlumno.addItem("Alumno A");
            jComboBoxAlumno.addItem("Alumno B");
            jComboBoxAlumno.addItem("Alumno C");
            jComboBoxAlumno.addItem("Alumno D");
            jComboBoxAlumno.addItem("Alumno E");
            jComboBoxAlumno.addItem("Alumno F");
            jComboBoxAlumno.addItem("Alumno G");
            jComboBoxAlumno.addItem("Alumno H"); 
        }
        
        String clase = (String) jComboBoxClase.getSelectedItem();
        File archivo = new File(rutaExcel);
        Workbook libroTrabajo;
        try {
            if (!archivo.exists()) {
                // Crear un nuevo archivo Excel si no existe
                libroTrabajo = new XSSFWorkbook();
            } else {
                libroTrabajo = WorkbookFactory.create(new FileInputStream(archivo));
            }
            Sheet hoja = libroTrabajo.getSheet(clase);

            if (hoja == null) {
                hoja = libroTrabajo.createSheet(clase);
                // Crear encabezados
                Row fila = hoja.createRow(0);
                String[] encabezados = {"Alumno", "Matemáticas", "Física", "Química", "Música", "Media Alumno"};
                for (int i = 0; i < encabezados.length; i++) {
                    Cell celda = fila.createCell(i);
                    celda.setCellValue(encabezados[i]);
                }

                // Guardar el archivo
                FileOutputStream fileOut = new FileOutputStream(archivo);
                libroTrabajo.write(fileOut);
                fileOut.close();
                libroTrabajo.close();
            }
            libroTrabajo.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al cargar alumnos: " + e.getMessage());
        }
    }

    // Añadir o actualizar notas en Excel
    private void añadirNotasAExcel(String alumno, Integer[] notas) {
        try {
            String clase = (String) jComboBoxClase.getSelectedItem();
            FileInputStream fileInputStream = new FileInputStream(rutaExcel);
            Workbook workbook = new XSSFWorkbook(fileInputStream);
            Sheet sheet = workbook.getSheet(clase);
            boolean alumnoEncontrado = false;
            
            // Borrar fila Media si ya existe
            for (int i = sheet.getPhysicalNumberOfRows() - 1; i >= 0; i--) {
                Row filaExistente = sheet.getRow(i);
                if (filaExistente != null && filaExistente.getCell(0) != null && filaExistente.getCell(0).getStringCellValue().equals("Media")) {
                    sheet.removeRow(filaExistente);
                }
            }
            
            if (sheet != null) {
                for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                    Row row = sheet.getRow(i);
                    if (row != null && row.getCell(0).getStringCellValue().equals(alumno)) {
                        alumnoEncontrado = true;
                        for (int j = 0; j < notas.length; j++) {
                            row.getCell(j + 1).setCellValue(notas[j]);
                        }
                        break;
                    }
                }
            }
            

            if (!alumnoEncontrado) {
                int nuevaFila = sheet.getLastRowNum() + 1;
                Row nuevaRow = sheet.createRow(nuevaFila);
                nuevaRow.createCell(0).setCellValue(alumno);
                for (int j = 0; j < notas.length; j++) {
                    nuevaRow.createCell(j + 1).setCellValue(notas[j]);
                }
            }
            
            int filaNumero = sheet.getPhysicalNumberOfRows();
            Row row = sheet.getRow(filaNumero - 1);
            Cell celda = row.createCell(5, CellType.NUMERIC);
            double sumaNotas = 0;
            for (double nota : notas) {
                sumaNotas += nota;
            }
            double mediaAlumno = sumaNotas / 4;
            celda.setCellValue(mediaAlumno);
            
            // Luego, crea la nueva fila de media en la última posición
            Row filaMedia = sheet.createRow(sheet.getPhysicalNumberOfRows());
            Cell celdaMedia = filaMedia.createCell(0);
            celdaMedia.setCellValue("Media");

            // Cálculo de medias
            for (int col = 1; col <= 4; col++) {
                double suma = 0;
                int filasDatos = sheet.getPhysicalNumberOfRows() - 1;
                for (int i = 1; i <= filasDatos; i++) {
                    Row filaActual = sheet.getRow(i);
                    if (filaActual == null) {
                        filaActual = sheet.createRow(i);  // Crea la fila si no existe
                    }
                    if (filaActual != null && filaActual.getCell(col) != null) {
                        suma += filaActual.getCell(col).getNumericCellValue();
                    }
                }
                double media = suma / (filasDatos - 1); // Número total de filas con datos
                Cell celdasMedia = filaMedia.createCell(col, CellType.NUMERIC);
                celdasMedia.setCellValue(media);
            }

            FileOutputStream fileOut = new FileOutputStream(rutaExcel);
            workbook.write(fileOut);
            fileOut.close();
            workbook.close();
            JOptionPane.showMessageDialog(this, "Notas añadidas correctamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al añadir notas: " + e.getMessage());
        }
    }

    // Leer notas de un alumno desde Excel
    private double[] leerNotasDesdeExcel(String alumno) {
        try {
            FileInputStream fileInputStream = new FileInputStream(rutaExcel);
            Workbook workbook = new XSSFWorkbook(fileInputStream);
            Sheet sheet = workbook.getSheet((String) jComboBoxClase.getSelectedItem());

            if (sheet != null) {
                for (int i = 1; i <= sheet.getLastRowNum() - 1; i++) {
                    Row row = sheet.getRow(i);
                    if (row != null && row.getCell(0).getStringCellValue().equals(alumno)) {
                        double[] notas = new double[row.getLastCellNum() - 1];
                        for (int j = 1; j < row.getLastCellNum(); j++) {
                            notas[j - 1] = row.getCell(j).getNumericCellValue();
                        }
                        workbook.close();
                        return notas;
                    }
                }
            }
            workbook.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer notas: " + e.getMessage());
        }
        return new double[0];
    }

    
    private double leerMediaExcel(String alumno) {
        try {
            FileInputStream fileInputStream = new FileInputStream(rutaExcel);
            Workbook workbook = new XSSFWorkbook(fileInputStream);
            Sheet sheet = workbook.getSheet((String) jComboBoxClase.getSelectedItem());

            if (sheet != null) {
                int filaNumero = sheet.getPhysicalNumberOfRows();
                Row row = sheet.getRow(filaNumero - 1);
                Cell celda = row.getCell(filaNumero);
                double media = celda.getNumericCellValue();
                return media;
            }
            workbook.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer media: " + e.getMessage());
        }
        return 0.0;
    }

    // Crear un gráfico de barras con las notas
    private void crearGraficoNotas(String titulo, String[] asignaturas, double[] notas, double media, String rutaGrafico) {
        try {
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
            DefaultCategoryDataset datasetMedia = new DefaultCategoryDataset();
            for (int i = 0; i < asignaturas.length; i++) {
                dataset.addValue(notas[i], "Notas", asignaturas[i]);
                datasetMedia.addValue(media, "Media", asignaturas[i]);
            }

            // Gráfico de barras
            JFreeChart graficoBarras = ChartFactory.createBarChart(
                titulo,
                "Asignaturas",
                "Notas",
                dataset
            );

            // Linea media
            CategoryPlot plot = graficoBarras.getCategoryPlot();
            LineAndShapeRenderer renderer = new LineAndShapeRenderer();
            plot.setDataset(1, datasetMedia);
            plot.mapDatasetToRangeAxis(1, 0);
            plot.setRenderer(1, renderer);
            // Guardar los gráficos como imágenes
            ChartUtils.saveChartAsJPEG(new File(rutaGrafico), graficoBarras, 800, 600);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al crear gráfico: " + e.getMessage());
        }
    }

    // Generar un PDF con las notas y el gráfico
    private void generarPDFAlumno(String rutaPDF, String alumno, double promedio, String rutaGrafico) {
        try {
            PdfWriter writer = new PdfWriter(rutaPDF);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            document.add(new Paragraph("Notas de " + alumno).setBold().setFontSize(16));
            document.add(new Paragraph("Media: " + String.format("%.2f", promedio)));

            ImageData imageData = ImageDataFactory.create(rutaGrafico);
            Image image = new Image(imageData).scaleToFit(500, 300);
            document.add(image);

            document.close();
            JOptionPane.showMessageDialog(this, "PDF generado correctamente en: " + rutaPDF);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al generar PDF: " + e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnosGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionAlumnosGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAñadirNotas;
    private javax.swing.JButton jButtonGenerarPDF;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemVentana;
    private javax.swing.JComboBox<String> jComboBoxAlumno;
    private javax.swing.JComboBox<String> jComboBoxClase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemNotas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner jSpinnerFisica;
    private javax.swing.JSpinner jSpinnerMatematicas;
    private javax.swing.JSpinner jSpinnerMusica;
    private javax.swing.JSpinner jSpinnerQuimica;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.mycompany.examendi_1224_jpm.TextoAprobado_Suspenso textoAprobado_Suspenso1;
    // End of variables declaration//GEN-END:variables
}
